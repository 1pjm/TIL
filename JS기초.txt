# JavaScript 기초

HTML에서 자바스크립트 연결
<script> 태그

자바스크립트 작성 명령어
document.write(내용);

alert()
js 경고창 띄우는 함수

prompt()
사용자에게 값을 입력 받음. 2개의 인수를 받을 수 있음. 입력 받은 값은 문자형.

confirm()
사용자에게 확인 받음. 확인과 취소 버튼이 뜬다.
확인->true, 취소->false

html onclick 속성의 속성값으로는 반드시 js가 와야함. js가 실행됨.
onchange, onkeydown 등등 속성 이벤트

input type="text"
글씨 입력할 수 있음

js 콘솔 로그 띄우는 함수
console.log()

let
최초로 선언하는 변수에 붙이면 이미 사용하고 있는지 알 수 있음.
const
수정할 수 없음. 절대로 바뀌지 않는 상수. 대문자로 선언.
js에서 변수 선언시 변하지 않는 값은 const, 변할 수 있는 값은 let 선언.
모든 변수 const로 선언하고 바뀌는 값을 let으로 바꾸는 것 추천.

`${변수}`

null 존재하지 않는 값
undefined 값이 할당되지 않음

자동 형변환 주의 -> 명시적 형변환

String()
괄호 안을 문자형으로 변환

Number()
숫자형으로 변환

Boolean()
false -> 숫자0, 빈 문자열 ", null, undefined, NaN
이 외에는 모두 true

Number(null) -> 0
Number(undefined) -> NaN

2^3 -> 2**3

OR ||
AND &&
NOT !
우선순위 AND > OR

for (let i=0; i<10; i++) {
  반복할 코드
}

let i=0;
while (i<10) {
  코드
  i++;
}

let i=0;
do {
  코드
  i++;
} while (i<10)

명확한 횟수가 정해져 있으면 for문, 아니라면 while.

switch(평가) {
  case A :
  A일때 코드
  case B :
  B일때 코드
  ...
}
break;를 안넣으면 해당 case와 그 이후의 모든 case 값을 출력함.
default가 else같은

function sayHello(name) {
  console.log(`Hello, ${name}`);
}

지역변수를 쓰는 습관.
함수표현식 보다 함수선언문이 더 자유롭다.

화살표 함수
function을 지우고 ()뒤에 => 붙인다.
화살표 함수는 일반 함수와 달리 자신만의 this를 가지지 않음.
화살표 함수 내부에서 this를 사용하면, 그 this는 외부에서 값을 가져 옴.
그러므로 객체의 메소드를 작성할 때엔 화살표 함수 사용 안하는 편이 좋음.

메소드의 this는 해당 객체를 가리킴.

index는 0부터 시작
.length 배열의 길이
push() 배열 끝에 요소 추가
pop() 배열 끝 요소 제거
shift, unshift 배열 앞에 제거, 추가

 // 배열 전체를 출력하는 코드1
for (let index=0; index<객체.length; i++) {
  console.log(객체[index]);
}
// 배열 전체를 출력하는 코드2
for (let x of 객체) {
  console.log(x); // x말고 아무거나 넣어도됨
}

forEach 반복문
배열에 쓰이는 반복문
인자로 콜백함수(어떤 이벤트에 의해 호출되는 함수)가 들어갈 수 있음.

for of
배열에서 원하는 값을 뽑아낼 때 사용

for in
객체에서 원하는 값을 뽑아낼 때 사용
